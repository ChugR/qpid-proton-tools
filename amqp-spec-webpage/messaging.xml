<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="amqp.xsl"?>

<!--
  Copyright Notice
  ================
  (c) Copyright Bank of America, N.A., Barclays Bank PLC, Cisco Systems, Credit Suisse, Deutsche
  Boerse, Envoy Technologies Inc., Goldman Sachs, HCL Technologies Ltd, IIT Software GmbH, iMatix
  Corporation, INETCO Systems Limited, Informatica Corporation, JPMorgan Chase & Co., Kaazing
  Corporation, N.A, Microsoft Corporation, my-Channels, Novell, Progress Software, Red Hat Inc.,
  Software AG, Solace Systems Inc., StormMQ Ltd., Tervela Inc., TWIST Process Innovations Ltd,
  VMware, Inc., and WS02 Inc.
  2006-2011. All rights reserved.

  License
  =======

  Bank of America, N.A., Barclays Bank PLC, Cisco Systems, Credit Suisse, Deutsche Boerse, Goldman
  Sachs, HCL Technologies Ltd, IIT Software GmbH, INETCO Systems Limited, Informatica Corporation,
  JPMorgan Chase & Co., Kaazing Corporation, N.A, Microsoft Corporation, my-Channels, Novell,
  Progress Software, Red Hat Inc., Software AG, Solace Systems Inc., StormMQ Ltd., Tervela Inc.,
  TWIST Process Innovations Ltd, VMware, Inc., and WS02 Inc. (collectively, the "Authors") each
  hereby grants to you a worldwide, perpetual, royalty-free, nontransferable, nonexclusive license
  to (i) copy, display, distribute and implement the Advanced Message Queuing Protocol ("AMQP")
  Specification and (ii) the Licensed Claims that are held by the Authors, all for the purpose of
  implementing the Advanced Message Queuing Protocol Specification. Your license and any rights
  under this Agreement will terminate immediately without notice from any Author if you bring any
  claim, suit, demand, or action related to the Advanced Message Queuing Protocol Specification
  against any Author. Upon termination, you shall destroy all copies of the Advanced Message Queuing
  Protocol Specification in your possession or control.

  As used hereunder, "Licensed Claims" means those claims of a patent or patent application,
  throughout the world, excluding design patents and design registrations, owned or controlled, or
  that can be sublicensed without fee and in compliance with the requirements of this Agreement, by
  an Author or its affiliates now or at any future time and which would necessarily be infringed by
  implementation of the Advanced Message Queuing Protocol Specification. A claim is necessarily
  infringed hereunder only when it is not possible to avoid infringing it because there is no
  plausible non-infringing alternative for implementing the required portions of the Advanced
  Message Queuing Protocol Specification. Notwithstanding the foregoing, Licensed Claims shall not
  include any claims other than as set forth above even if contained in the same patent as Licensed
  Claims; or that read solely on any implementations of any portion of the Advanced Message Queuing
  Protocol Specification that are not required by the Advanced Message Queuing Protocol
  Specification, or that, if licensed, would require a payment of royalties by the licensor to
  unaffiliated third parties. Moreover, Licensed Claims shall not include (i) any enabling
  technologies that may be necessary to make or use any Licensed Product but are not themselves
  expressly set forth in the Advanced Message Queuing Protocol Specification (e.g., semiconductor
  manufacturing technology, compiler technology, object oriented technology, networking technology,
  operating system technology, and the like); or (ii) the implementation of other published
  standards developed elsewhere and merely referred to in the body of the Advanced Message Queuing
  Protocol Specification, or (iii) any Licensed Product and any combinations thereof the purpose or
  function of which is not required for compliance with the Advanced Message Queuing Protocol
  Specification. For purposes of this definition, the Advanced Message Queuing Protocol
  Specification shall be deemed to include both architectural and interconnection requirements
  essential for interoperability and may also include supporting source code artifacts where such
  architectural, interconnection requirements and source code artifacts are expressly identified as
  being required or documentation to achieve compliance with the Advanced Message Queuing Protocol
  Specification.

  As used hereunder, "Licensed Products" means only those specific portions of products (hardware,
  software or combinations thereof) that implement and are compliant with all relevant portions of
  the Advanced Message Queuing Protocol Specification.

  The following disclaimers, which you hereby also acknowledge as to any use you may make of the
  Advanced Message Queuing Protocol Specification:

  THE ADVANCED MESSAGE QUEUING PROTOCOL SPECIFICATION IS PROVIDED "AS IS," AND THE AUTHORS MAKE NO
  REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS
  OF THE ADVANCED MESSAGE QUEUING PROTOCOL SPECIFICATION ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE
  IMPLEMENTATION OF THE ADVANCED MESSAGE QUEUING PROTOCOL SPECIFICATION WILL NOT INFRINGE ANY THIRD
  PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.

  THE AUTHORS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  DAMAGES ARISING OUT OF OR RELATING TO ANY USE, IMPLEMENTATION OR DISTRIBUTION OF THE ADVANCED
  MESSAGE QUEUING PROTOCOL SPECIFICATION.

  The name and trademarks of the Authors may NOT be used in any manner, including advertising or
  publicity pertaining to the Advanced Message Queuing Protocol Specification or its contents
  without specific, written prior permission. Title to copyright in the Advanced Message Queuing
  Protocol Specification will at all times remain with the Authors.

  No other rights are granted by implication, estoppel or otherwise.

  Upon termination of your license or rights under this Agreement, you shall destroy all copies of
  the Advanced Message Queuing Protocol Specification in your possession or control.

  Trademarks
  ==========
  "JPMorgan", "JPMorgan Chase", "Chase", the JPMorgan Chase logo and the Octagon Symbol are
  trademarks of JPMorgan Chase & Co.

  RED HAT is a registered trademarks of Red Hat, Inc. in the US and other countries.

  Other company, product, or service names may be trademarks or service marks of others.

  Link to full AMQP specification:
  =================================
  http://www.amqp.org/confluence/display/AMQP/AMQP+Specification
-->

<!DOCTYPE amqp SYSTEM "amqp.dtd">

<amqp xmlns="http://www.amqp.org/schema/amqp.xsd"
      name="messaging" label="working version">

  <section name="message-format" title="Message Format" label="Message format definitions">

    <type class="composite" name="header" source="list" provides="section"
          label="transport headers for a Message">

      <descriptor name="amqp:header:list" code="0x00000000:0x00000070"/>

      <field name="durable" type="boolean" label="specify durability requirements">
      </field>

      <field name="priority" type="ubyte" label="relative Message priority">
      </field>

      <field name="ttl" type="milliseconds" label="time to live in ms">
      </field>

      <field name="first-acquirer" type="boolean" label="">
      </field>

      <field name="delivery-count" type="uint"
             label="the number of prior unsuccessful delivery attempts">
      </field>

    </type>

    <type class="restricted" name="delivery-annotations" source="annotations" provides="section">
      <descriptor name="amqp:delivery-annotations:map" code="0x00000000:0x00000071"/>
    </type>

    <type class="restricted" name="message-annotations" source="annotations" provides="section">
      <descriptor name="amqp:message-annotations:map" code="0x00000000:0x00000072"/>
    </type>

    <type class="composite" name="properties" source="list" provides="section"
          label="immutable properties of the Message">

      <descriptor name="amqp:properties:list" code="0x00000000:0x00000073"/>

      <field name="message-id" type="*" requires="message-id"
             label="application Message identifier">
      </field>

      <field name="user-id" type="binary" label="creating user id">
      </field>

      <field name="to" type="*" requires="address"
             label="the address of the Node for which the Message is destined">
      </field>

      <field name="subject" type="string" label="the subject of the message">
      </field>

      <field name="reply-to" type="*" requires="address" label="the Node to send replies to">
      </field>

      <field name="correlation-id" type="*" requires="message-id"
             label="application correlation identifier">
      </field>

      <field name="content-type" type="symbol" label="MIME content type">
      </field>

      <field name="content-encoding" type="symbol" label="MIME content type">
      </field>

      <field name="absolute-expiry-time" type="timestamp"
             label="the time when this message is considered expired">
      </field>

      <field name="creation-time" type="timestamp"
             label="the time when this message was created">
      </field>

      <field name="group-id" type="string"
             label="the group this message belongs to">
      </field>

      <field name="group-sequence" type="sequence-no"
             label="the sequence-no of this message within its group">
      </field>

      <field name="reply-to-group-id" type="string"
             label="the group the reply message belongs to">
      </field>

    </type>

    <type class="restricted" name="application-properties" source="map" provides="section">
      <descriptor name="amqp:application-properties:map" code="0x00000000:0x00000074"/>
    </type>

    <type class="restricted" name="data" source="binary" provides="section">

      <descriptor name="amqp:data:binary" code="0x00000000:0x00000075"/>
    </type>

    <type class="restricted" name="amqp-sequence" source="list" provides="section">

      <descriptor name="amqp:amqp-sequence:list" code="0x00000000:0x00000076"/>
    </type>

    <type class="restricted" name="amqp-value" source="*" provides="section">

      <descriptor name="amqp:amqp-value:*" code="0x00000000:0x00000077"/>
    </type>

    <type class="restricted" name="footer" source="annotations" provides="section"
          label="transport footers for a Message">

      <descriptor name="amqp:footer:map" code="0x00000000:0x00000078"/>
    </type>

    <type class="restricted" name="annotations" source="map">
    </type>

    <type class="restricted" name="message-id-ulong" source="ulong" provides="message-id"/>
    <type class="restricted" name="message-id-uuid" source="uuid" provides="message-id"/>
    <type class="restricted" name="message-id-binary" source="binary" provides="message-id"/>
    <type class="restricted" name="message-id-string" source="string" provides="message-id"/>

    <type class="restricted" name="address-string" source="string" provides="address"
          label="address of a Node"/>

    <definition name="MESSAGE-FORMAT" value="0"
                label="the format + revision for the messages defined by this document">
    </definition>
  </section>

  <section name="delivery-state" title="Delivery State"
           label="the delivery states defined for messaging">

    <type class="composite" name="received" source="list" provides="delivery-state">
      <descriptor name="amqp:received:list" code="0x00000000:0x00000023"/>
      <field name="section-number" type="uint" mandatory="true">
      </field>
      <field name="section-offset" type="ulong" mandatory="true">
      </field>
    </type>

    <type class="composite" name="accepted" source="list" provides="delivery-state, outcome"
          label="the accepted outcome">

      <descriptor name="amqp:accepted:list" code="0x00000000:0x00000024"/>

    </type>

    <type class="composite" name="rejected" source="list" provides="delivery-state, outcome"
          label="the rejected outcome">

      <descriptor name="amqp:rejected:list" code="0x00000000:0x00000025"/>


      <field name="error" type="error" label="error that caused the message to be rejected">
      </field>
    </type>

    <type class="composite" name="released" source="list" provides="delivery-state, outcome"
          label="the released outcome">

      <descriptor name="amqp:released:list" code="0x00000000:0x00000026"/>


    </type>

    <type class="composite" name="modified" source="list" provides="delivery-state, outcome"
          label="the modified outcome">

      <descriptor name="amqp:modified:list" code="0x00000000:0x00000027"/>



      <field name="delivery-failed" type="boolean"
             label="count the transfer as an unsuccessful delivery attempt">
      </field>

      <field name="undeliverable-here" type="boolean" label="prevent redelivery">
      </field>

      <field name="message-annotations" type="fields" label="message attributes">
      </field>
    </type>

    <doc name="more-resuming-deliveries" title="Resuming Deliveries Using Delivery States">
      <p>
        In <xref type="doc" name="resuming-deliveries"/> the general scheme for how two endpoints
        should re-establish state after link resumption was provided. The concrete delivery states
        defined above allow for a more comprehensive set of examples of link resumption.
      </p>
      <picture><![CDATA[
    Peer                                   Partner
    =======================================================================

    ATTACH(name=N, handle=1,   --+     +-- ATTACH(name=N, handle=2,
           role=sender,           \   /           role=receiver,
           source=X,               \ /            source=X,
           target=Y,                x             target=Y,
           unsettled=              / \            unsettled=
            { 1 -> null,          /   \            { 2 -> Received(3,0),
              2 -> null,       <-+     +->           3 -> Accepted,
              3 -> null,                             4 -> null,
              4 -> null,                             6 -> Received(2,0),
              5 -> Received(0,200),                  7 -> Received(0,100),
              6 -> Received(1,150),                  8 -> Accepted,
              7 -> Received(0,500),                  9 -> null,
              8 -> Received(3,5),                   11 -> Received(1,2000),
              9 -> Received(2,0),                   12 -> Accepted,
             10 -> Accepted,                        13 -> Released,
             11 -> Accepted,                        14 -> null }
             12 -> Accepted,
             13 -> Accepted,
             14 -> Accepted }

    -----------------------------------------------------------------------
    Key:

    Received(x,y) means Received(section-number=x, section-offset=y)
]]>
      </picture>
      <p>
        In this example, for delivery-tags 1 to 4 inclusive the sender indicates that it can resume
        sending from the start of the message.
      </p>
      <p>
        For delivery-tag 1, the receiver has no record of the delivery. To preserve "at least once",
        or "at most once" delivery guarantees, the sender MUST resend the message, however the
        delivery is not being resumed (since the receiver does not remember the delivery tag) so
        transfers MUST NOT have the resume flag set to true. If the sender were to mark the
        transfers as resumes then they would be ignored at the receiver.
      </p>
      <p>
        For delivery-tag 2, the receiver has retained some of the data making up the message, but
        not the whole. In order to complete the delivery the sender must resume sending from some
        point before or at the next position which the receiver is expecting.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=1,    ----------> ** Append message data not     **
             delivery-tag=2,               ** seen previously to delivery **
        (1)  state=Received(3,0),          ** state.                      **
             resume=true)
    { ** payload ** }


    (1) state could be
        a) null, meaning that the transfer is being resumed from the first
           byte of section number 0 (and the receiver MUST ignore all data
           up to the first position it has not previously received).
        b) Received with section number 0, 1 or 2 and an offset, indicating
           that the payload data on the first frame of the resumed delivery
           starts at the given point, and that the receiver MUST ignore all
           data up to the first position it has not previously received.
        c) Received(3,0) indicating that the resumption will start at the
           first point which the receiver has not previously received.  ]]>   </picture>
      <p>
        For delivery-tag 3, the receiver indicates that it has processed the delivery to the point
        where it desires a terminal outcome (in this case <xref name="accepted"/>). In this case
        the sender will either apply that outcome at the source, or in the rare case that it cannot
        apply that outcome, indicate the terminal outcome that has been applied. To do this the
        sender MUST send a resuming transfer to associate delivery-tag 3 with a delivery-id. On this
        transfer the sender SHOULD set the delivery-state at the source. If this is the same outcome
        as at the receiver then the sender MAY also send the resuming transfer as settled.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=2,    ----------> ** Processes confirmation that **
             delivery-tag=3,               ** was accepted, and settles.  **
             settled=true,
             more=false,
             state=Accepted,
             resume=true) ]]>   </picture>
      <p>
        For delivery-tag 4, the receiver indicates that it is aware that the delivery had begun, but
        does not provide any indication that it has retained any data about that delivery except
        the fact of its existence. To preserve "at least once" or "at most once" delivery
        guarantees, the sender MUST resend the whole message. Unlike the case with delivery-tag 1
        the resent delivery MUST be sent with the resume flag set to true and the delivery-tag set
        to 4. (While this use of null in the receivers map is valid, it is discouraged. It is
        recommended that receiver SHOULD NOT retain such an entry in its map, in which case the
        situation would be as for delivery-tag 1 in this example).
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=3,    ----------> ** Processes in the same way   **
             delivery-tag=4,               ** as we be done for a non-    **
        (1)  state=null,                   ** resumed delivery.           **
             resume=true)
    { ** payload ** }


    (1) Alternatively (and equivalently) state could be
        Received(section-number=0, section-offset=0) ]]>   </picture>
      <p>
        For delivery-tags 5 to 9 inclusive the sender indicates that it can resume at some point
        beyond start of the message data. This is usually indicative of the fact that the receiver
        had previously confirmed reception of message data to the given point, removing
        responsibility from the sender to retain the ability to resend that data after resuming
        the link. The sender MAY still retain the ability to resend the message as a new delivery
        (i.e. it MAY not have completely discarded the data from which the original delivery was
        generated).
      </p>
      <p>
        For delivery-tag 5, the receiver has no record of the delivery. To preserve "at least once",
        or "at most once" delivery guarantees, the sender MUST resend the message, however the
        delivery is not being resumed (since the receiver does not remember the delivery tag) so
        transfers MUST NOT have the resume flag set to true. If the sender does not enough data to
        resend the message, then he sender MAY take some action to indicate that it believes there
        is a possibility that there has been message loss.
      </p>
      <p>
        For delivery-tag 6, the receiver has retained some of the data making up the message, but
        not the whole. The first position within the message which the receiver has not received is
        after the first position at which the sender can resume sending. In order to complete the
        delivery the sender must resume sending from some point before or at the next position which
        the receiver is expecting.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=4,    ----------> ** Append message data not     **
             delivery-tag=6,               ** seen previously to delivery **
        (1)  state=Received(2,0),          ** state.                      **
             resume=true)
    { ** payload ** }


    (1) state could be any point between Received(1,150) and Received(2,0)
        inclusive. The receiver MUST ignore all data up to the first
        position it has not previously received (i.e. section 2 offset 0).  ]]>   </picture>
      <p>
        For delivery-tag 7, the receiver has retained some of the data making up the message, but
        not the whole. The first position within the message which the receiver has not received is
        before the first position at which the sender can resume sending. It is thus not possible
        for the sender to resume sending the message to completion. The only option available to the
        sender is to abort the transfer and to then (if possible) resend as a new delivery or else
        to report the possible message loss in some way if it cannot.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=5,    ----------> ** Discard any state relating  **
             delivery-tag=7,               ** to the message delivery.    **
             resume=true,
             aborted=true) ]]>   </picture>
      <p>
        For delivery-tag 8, the receiver indicates that it has processed the delivery to the point
        where it desires a terminal outcome (in this case <xref name="accepted"/>). This is the
        same case as for delivery-tag 3.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=6,    ----------> ** Processes confirmation that **
             delivery-tag=8,               ** was accepted, and settles.  **
             settled=true,
             more=false,
             state=Accepted,
             resume=true) ]]>  </picture>
      <p>
        For delivery-tag 9, the receiver indicates that it is aware that the delivery had begun, but
        does not provide any indication that it has retained any data about that delivery except
        the fact of its existence. This is the same case as for delivery-tag 7.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=7,    ----------> ** Discard any state relating  **
             delivery-tag=9,               ** to the message delivery.    **
             resume=true,
             aborted=true) ]]>   </picture>
      <p>
        For delivery-tags 10 to 14 inclusive the sender indicates that it has reached a terminal
        outcome, namely <xref name="accepted"/>. Once the sender has arrived at a terminal outcome
        it may not change. As such, if a sender is capable of resuming a delivery (even if the only
        possible outcome of the delivery is a pre-defined terminal outcome such as <xref
        name="accepted"/>) it MUST NOT use this state as the value of the state in its unsettled map
        until it is sure that the receiver will not require the resending of the message data.
      </p>
      <p>
        For delivery-tag 10 the receiver has no record of the delivery. However, in contrast to the
        cases of delivery-tag 1 and delivery-tag 5, since we know that the sender can only have
        arrived at this state through knowing that the receiver has received the whole message (or
        that the sender had spontaneously reached a terminal outcome with no possibility of
        resumption) we have no need to resend the message.
      </p>
      <p>
        For delivery-tag 11 we have to assume that the sender spontaneously attained the terminal
        outcome (and is unable to resume). In this case the sender can simply abort the delivery
        as it cannot be resumed.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=8,    ----------> ** Discard any state relating  **
             delivery-tag=11,              ** to the message delivery.    **
             resume=true,
             aborted=true) ]]>   </picture>
      <p>
        For delivery-tag 12 both the sender and receiver have attained the same view of the terminal
        outcome, but neither has settled. In this case the sender should simply settle the delivery.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=9,    ----------> ** Locally settle the delivery **
             delivery-tag=12,
             settled=true,
             resume=true) ]]>   </picture>
      <p>
        For delivery-tag 13 the sender and receiver have both attained terminal outcomes, but the
        outcomes differ. In this case, since the outcome actually takes effect at the sender, it is
        the sender's view that is definitive. The sender thus MUST restate this as the terminal
        outcome, and the receiver should then echo this and settle.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=10    ----------> ** Update any state affected   **
             delivery-tag=13,              ** by the actual outcome, then **
             settled=false,                ** settle the delivery         **
             state=Accepted
             resume=true)
                               <---------- DISPOSITION(first=10, last=10,
                                                       state=Accepted,
                                                       settled=true) ]]>   </picture>
      <p>
        For delivery-tag 14 the case is essentially the same as for delivery-tag 11, as the null
        state at the receiver is essentially identical to having the state
        Received{section-number=0, section-offset=0}.
      </p>
      <picture><![CDATA[
    TRANSFER(delivery-id=11,   ----------> ** Discard any state relating  **
             delivery-tag=14,              ** to the message delivery.    **
             resume=true,
             aborted=true) ]]>   </picture>

    </doc>
  </section>

  <section name="addressing" title="Sources and Targets"
           label="concrete sources and targets defined for messaging">

    <doc title="Filtering Messages">
      <p>
        A source can restrict the messages transferred from a source by specifying a <i>filter</i>.
        Filters can be thought of as functions which take the message as input and return a boolean
        value: true if the message will be accepted by the source, false otherwise. A <i>filter</i>
        MUST NOT change its return value for a Message unless the state or annotations on the
        Message at the Node change (e.g. through an updated delivery state).
      </p>
    </doc>

    <doc title="Distribution Modes">
      <p>
        The Source defines an optional distribution-mode that informs and/or indicates how
        distribution nodes are to behave with respect to the Link. The distribution-mode of a Source
        determines how Messages from a distribution node are distributed among its associated Links.
        There are two defined distribution-modes: <i>move</i> and <i>copy</i>. When specified, the
        distribution-mode has two related effects on the behavior of a distribution node with
        respect to the Link associated with the Source.
      </p>

      <p>
        The <i>move</i> distribution-mode causes messages transferred from the distribution node to
        transition to the ACQUIRED state prior to transfer over the link, and subsequently to the
        ARCHIVED state when the transfer is settled with a successful outcome. The <i>copy</i>
        distribution-mode leaves the state of the Message unchanged at the distribution node.
      </p>

      <p>
        A Source MUST NOT resend a Message which has previously been successfully transferred from
        the Source, i.e. reached an ACCEPTED delivery state at the receiver. For a
        <i>move</i> link with a default configuration this is trivially achieved as such an end
        result will lead to the Message in the ARCHIVED state on the Node, and thus anyway
        ineligible for transfer. For a <i>copy</i> link, state must be retained at the source to
        ensure compliance. In practice, for nodes which maintain a strict order on Messages at the
        node, the state may simply be a record of the most recent Message transferred.
      </p>
    </doc>

    <type class="composite" name="source" provides="source" source="list">
      <descriptor name="amqp:source:list" code="0x00000000:0x00000028"/>
      <field name="address" type="*" requires="address" label="the address of the source">
      </field>

      <field name="durable" type="terminus-durability" default="none"
             label="indicates the durability of the terminus">
      </field>

      <field name="expiry-policy" type="terminus-expiry-policy" default="session-end"
             label="the expiry policy of the Source">
      </field>

      <field name="timeout" type="seconds" default="0"
             label="duration that an expiring Source will be retained">
      </field>

      <field name="dynamic" type="boolean" default="false"
             label="request dynamic creation of a remote Node">
      </field>

      <field name="dynamic-node-properties" type="node-properties"
             label="properties of the dynamically created Node">
      </field>

      <field name="distribution-mode" type="symbol" requires="distribution-mode"
             label="the distribution mode of the Link">
      </field>

      <field name="filter" type="filter-set"
             label="a set of predicates to filter the Messages admitted onto the Link">
      </field>

      <field name="default-outcome" type="*" requires="outcome"
             label="default outcome for unsettled transfers">
      </field>

      <field name="outcomes" type="symbol" multiple="true"
             label="descriptors for the outcomes that can be chosen on this link">
      </field>

      <field name="capabilities" type="symbol" multiple="true"
                   label="the extension capabilities the sender supports/desires">
      </field>
    </type>

    <type class="composite" name="target" provides="target" source="list">

      <descriptor name="amqp:target:list" code="0x00000000:0x00000029"/>


      <field name="address" type="*" requires="address" label="The address of the target.">
      </field>

      <field name="durable" type="terminus-durability" default="none"
             label="indicates the durability of the terminus">
      </field>

      <field name="expiry-policy" type="terminus-expiry-policy" default="session-end"
             label="the expiry policy of the Target">
      </field>

      <field name="timeout" type="seconds" default="0"
             label="duration that an expiring Target will be retained">
      </field>

      <field name="dynamic" type="boolean" default="false"
             label="request dynamic creation of a remote Node">
      </field>

      <field name="dynamic-node-properties" type="node-properties"
             label="properties of the dynamically created Node">
      </field>

      <field name="capabilities" type="symbol" multiple="true"
                   label="the extension capabilities the sender supports/desires">
      </field>
    </type>

    <type class="restricted" name="terminus-durability" source="uint"
          label="durability policy for a Terminus">
      <choice name="none" value="0">
      </choice>
      <choice name="configuration" value="1">
      </choice>
      <choice name="unsettled-state" value="2">
      </choice>
    </type>

    <type class="restricted" name="terminus-expiry-policy" source="symbol"
          label="expiry policy for a Terminus">
      <choice name="link-detach" value="link-detach">
      </choice>
      <choice name="session-end" value="session-end">
      </choice>
      <choice name="connection-close" value="connection-close">
      </choice>
      <choice name="never" value="never">
      </choice>
    </type>

    <type class="restricted" name="std-dist-mode" source="symbol" provides="distribution-mode"
          label="Link distribution policy">

      <choice name="move" value="move">
      </choice>

      <choice name="copy" value="copy">
      </choice>
    </type>

    <type class="restricted" name="filter-set" source="map">
    </type>

    <type class="restricted" name="node-properties" source="fields" label="properties of a Node">
    </type>

    <type class="composite" name="delete-on-close" source="list" provides="lifetime-policy"
          label="lifetime of dynamic Node scoped to lifetime of link which caused creation">

      <descriptor name="amqp:delete-on-close:list" code="0x00000000:0x0000002b"/>

    </type>

    <type class="composite" name="delete-on-no-links" source="list" provides="lifetime-policy"
          label="lifetime of dynamic Node scoped to existence of links to the Node">

      <descriptor name="amqp:delete-on-no-links:list" code="0x00000000:0x0000002c"/>

    </type>

    <type class="composite" name="delete-on-no-messages" source="list" provides="lifetime-policy"
          label="lifetime of dynamic Node scoped to existence of messages on the Node">

      <descriptor name="amqp:delete-on-no-messages:list" code="0x00000000:0x0000002d"/>

    </type>

    <type class="composite" name="delete-on-no-links-or-messages" source="list"
          provides="lifetime-policy"
          label="lifetime of Node scoped to existence of messages on or links to the Node">

      <descriptor name="amqp:delete-on-no-links-or-messages:list" code="0x00000000:0x0000002e"/>

    </type>

  </section>

</amqp>
